#include <cmath>
#include <ctime>
#include <iostream>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cstdio>
#include <map>

using namespace std;

class SurroundingGameEasy {
public:
   int score( vector <string> cost, vector <string> benefit, vector <string> stone ) {
//       int isAdjacent[20][20];
//       int n = sizeof(isAdjacent)/sizeof(isAdjacent[0][0]);
//       int cost2=0,benefit2=0;
       int res =0;
       int di[]={0,0,1,-1};
       int dj[]={-1,1,0,0};
       cout<<(int)('1'-'0');
       for(int i=0;i<stone.size();i++){
           for (int j=0; j<stone[0].size(); j++) {
               if(stone[i][j]=='o'){
                   res += (int)(benefit[i][j]-'0')-(int)(cost[i][j]-'0');
               }else{
                   int r=0;
                   for (int k=0; k<4; k++) {
                       int X=i+di[k];
                       int Y=j+dj[k];
                       if(X<0||X>=stone.size()){
                           r++;
                       }
                       if(Y<0||Y>=stone[i].size()){
                           r++;
                       }
                       if(X>=0 && X<stone.size() && Y>=0 && Y<=stone[i].size() && stone[X][Y]=='o'){
                           r++;
                       }
                   }
                   if(r==4){
                       res += (int)(benefit[i][j]-'0');
                   }
               }
           }
       }
        return res;
   }
};

// BEGIN CUT HERE
namespace moj_harness {
	int run_test_case(int);
	void run_test(int casenum = -1, bool quiet = false) {
		if (casenum != -1) {
			if (run_test_case(casenum) == -1 && !quiet) {
				cerr << "Illegal input! Test case " << casenum << " does not exist." << endl;
			}
			return;
		}
		
		int correct = 0, total = 0;
		for (int i=0;; ++i) {
			int x = run_test_case(i);
			if (x == -1) {
				if (i >= 100) break;
				continue;
			}
			correct += x;
			++total;
		}
		
		if (total == 0) {
			cerr << "No test cases run." << endl;
		} else if (correct < total) {
			cerr << "Some cases FAILED (passed " << correct << " of " << total << ")." << endl;
		} else {
			cerr << "All " << total << " tests passed!" << endl;
		}
	}
	
	int verify_case(int casenum, const int &expected, const int &received, clock_t elapsed) { 
		cerr << "Example " << casenum << "... "; 
		
		string verdict;
		vector<string> info;
		char buf[100];
		
		if (elapsed > CLOCKS_PER_SEC / 200) {
			sprintf(buf, "time %.2fs", elapsed * (1.0/CLOCKS_PER_SEC));
			info.push_back(buf);
		}
		
		if (expected == received) {
			verdict = "PASSED";
		} else {
			verdict = "FAILED";
		}
		
		cerr << verdict;
		if (!info.empty()) {
			cerr << " (";
			for (int i=0; i<(int)info.size(); ++i) {
				if (i > 0) cerr << ", ";
				cerr << info[i];
			}
			cerr << ")";
		}
		cerr << endl;
		
		if (verdict == "FAILED") {
			cerr << "    Expected: " << expected << endl; 
			cerr << "    Received: " << received << endl; 
		}
		
		return verdict == "PASSED";
	}

	int run_test_case(int casenum__) {
		switch (casenum__) {
		case 0: {
			string cost[]             = {"21","12"};
			string benefit[]          = {"21","12"};
			string stone[]            = {".o","o."};
			int expected__            = 4;

			clock_t start__           = clock();
			int received__            = SurroundingGameEasy().score(vector <string>(cost, cost + (sizeof cost / sizeof cost[0])), vector <string>(benefit, benefit + (sizeof benefit / sizeof benefit[0])), vector <string>(stone, stone + (sizeof stone / sizeof stone[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		case 1: {
			string cost[]             = {"99","99"};
			string benefit[]          = {"11","11"};
			string stone[]            = {".o","o."};
			int expected__            = -14;

			clock_t start__           = clock();
			int received__            = SurroundingGameEasy().score(vector <string>(cost, cost + (sizeof cost / sizeof cost[0])), vector <string>(benefit, benefit + (sizeof benefit / sizeof benefit[0])), vector <string>(stone, stone + (sizeof stone / sizeof stone[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		case 2: {
			string cost[]             = {"888","888","888"};
			string benefit[]          = {"000","090","000"};
			string stone[]            = {"...",".o.","..."};
			int expected__            = 1;

			clock_t start__           = clock();
			int received__            = SurroundingGameEasy().score(vector <string>(cost, cost + (sizeof cost / sizeof cost[0])), vector <string>(benefit, benefit + (sizeof benefit / sizeof benefit[0])), vector <string>(stone, stone + (sizeof stone / sizeof stone[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		case 3: {
			string cost[]             = {"4362","4321"};
			string benefit[]          = {"5329","5489"};
			string stone[]            = {"...o","..o."};
			int expected__            = 22;

			clock_t start__           = clock();
			int received__            = SurroundingGameEasy().score(vector <string>(cost, cost + (sizeof cost / sizeof cost[0])), vector <string>(benefit, benefit + (sizeof benefit / sizeof benefit[0])), vector <string>(stone, stone + (sizeof stone / sizeof stone[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}
		case 4: {
			string cost[]             = {"5413","4323","8321","5490"};
			string benefit[]          = {"0432","7291","3901","2310"};
			string stone[]            = {"ooo.","o..o","...o","oooo"};
			int expected__            = -12;

			clock_t start__           = clock();
			int received__            = SurroundingGameEasy().score(vector <string>(cost, cost + (sizeof cost / sizeof cost[0])), vector <string>(benefit, benefit + (sizeof benefit / sizeof benefit[0])), vector <string>(stone, stone + (sizeof stone / sizeof stone[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}

		// custom cases

/*      case 5: {
			string cost[]             = ;
			string benefit[]          = ;
			string stone[]            = ;
			int expected__            = ;

			clock_t start__           = clock();
			int received__            = SurroundingGameEasy().score(vector <string>(cost, cost + (sizeof cost / sizeof cost[0])), vector <string>(benefit, benefit + (sizeof benefit / sizeof benefit[0])), vector <string>(stone, stone + (sizeof stone / sizeof stone[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}*/
/*      case 6: {
			string cost[]             = ;
			string benefit[]          = ;
			string stone[]            = ;
			int expected__            = ;

			clock_t start__           = clock();
			int received__            = SurroundingGameEasy().score(vector <string>(cost, cost + (sizeof cost / sizeof cost[0])), vector <string>(benefit, benefit + (sizeof benefit / sizeof benefit[0])), vector <string>(stone, stone + (sizeof stone / sizeof stone[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}*/
/*      case 7: {
			string cost[]             = ;
			string benefit[]          = ;
			string stone[]            = ;
			int expected__            = ;

			clock_t start__           = clock();
			int received__            = SurroundingGameEasy().score(vector <string>(cost, cost + (sizeof cost / sizeof cost[0])), vector <string>(benefit, benefit + (sizeof benefit / sizeof benefit[0])), vector <string>(stone, stone + (sizeof stone / sizeof stone[0])));
			return verify_case(casenum__, expected__, received__, clock()-start__);
		}*/
		default:
			return -1;
		}
	}
}
 

int main(int argc, char *argv[]) {
	if (argc == 1) {
		moj_harness::run_test();
	} else {
		for (int i=1; i<argc; ++i)
			moj_harness::run_test(atoi(argv[i]));
	}
}
// END CUT HERE
