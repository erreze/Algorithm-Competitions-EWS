#include <cmath>
#include <ctime>
#include <iostream>
#include <cstring>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cstdio>
#include <map>

using namespace std;

class Matching {
public:
   vector <string> findMatch( vector <string> first, vector <string> second ) {
       string a = first[0]==second[0]?first[0]:get(first[0],second[0],"CIRCLE","SQUIGGLE","DIAMOND");
       string b = first[1]==second[1]?first[1]:get(first[1],second[1],"RED","BLUE","GREEN");
       string c = first[2]==second[2]?first[2]:get(first[2],second[2],"SOLID","STRIPED","EMPTY");
       string d = first[3]==second[3]?first[3]:get(first[3],second[3],"ONE","TWO","THREE");
       vector<string> res;
       res.push_back(a);
       res.push_back(b);
       res.push_back(c);
       res.push_back(d);
       return res;
   }
    
    string get(string x, string y, string a, string b, string c){
        set<string> setx;
        setx.insert(a);
        setx.insert(b);
        setx.insert(c);
        setx.erase(x);
        setx.erase(y);
        vector<string> ar (setx.begin(),setx.end());
        return ar[0];
    }
};

// BEGIN CUT HERE
namespace moj_harness {
	int run_test_case(int);
	void run_test(int casenum = -1, bool quiet = false) {
		if (casenum != -1) {
			if (run_test_case(casenum) == -1 && !quiet) {
				cerr << "Illegal input! Test case " << casenum << " does not exist." << endl;
			}
			return;
		}
		
		int correct = 0, total = 0;
		for (int i=0;; ++i) {
			int x = run_test_case(i);
			if (x == -1) {
				if (i >= 100) break;
				continue;
			}
			correct += x;
			++total;
		}
		
		if (total == 0) {
			cerr << "No test cases run." << endl;
		} else if (correct < total) {
			cerr << "Some cases FAILED (passed " << correct << " of " << total << ")." << endl;
		} else {
			cerr << "All " << total << " tests passed!" << endl;
		}
	}
	
	template<typename T> ostream& operator<<(ostream &os, const vector<T> &v) { os << "{"; for (typename vector<T>::const_iterator vi=v.begin(); vi!=v.end(); ++vi) { if (vi != v.begin()) os << ","; os << " " << *vi; } os << " }"; return os; }
	template<> ostream& operator<<(ostream &os, const vector<string> &v) { os << "{"; for (vector<string>::const_iterator vi=v.begin(); vi!=v.end(); ++vi) { if (vi != v.begin()) os << ","; os << " \"" << *vi << "\""; } os << " }"; return os; }

	int verify_case(int casenum, const vector <string> &expected, const vector <string> &received, clock_t elapsed) { 
		cerr << "Example " << casenum << "... "; 
		
		string verdict;
		vector<string> info;
		char buf[100];
		
		if (elapsed > CLOCKS_PER_SEC / 200) {
			sprintf(buf, "time %.2fs", elapsed * (1.0/CLOCKS_PER_SEC));
			info.push_back(buf);
		}
		
		if (expected == received) {
			verdict = "PASSED";
		} else {
			verdict = "FAILED";
		}
		
		cerr << verdict;
		if (!info.empty()) {
			cerr << " (";
			for (int i=0; i<(int)info.size(); ++i) {
				if (i > 0) cerr << ", ";
				cerr << info[i];
			}
			cerr << ")";
		}
		cerr << endl;
		
		if (verdict == "FAILED") {
			cerr << "    Expected: " << expected << endl; 
			cerr << "    Received: " << received << endl; 
		}
		
		return verdict == "PASSED";
	}

	int run_test_case(int casenum__) {
		switch (casenum__) {
		case 0: {
			string first[]            = {"DIAMOND","BLUE","SOLID","ONE"}
;
			string second[]           = {"DIAMOND","GREEN","SOLID","TWO"}
;
			string expected__[]       = { "DIAMOND",  "RED",  "SOLID",  "THREE" };

			clock_t start__           = clock();
			vector <string> received__ = Matching().findMatch(vector <string>(first, first + (sizeof first / sizeof first[0])), vector <string>(second, second + (sizeof second / sizeof second[0])));
			return verify_case(casenum__, vector <string>(expected__, expected__ + (sizeof expected__ / sizeof expected__[0])), received__, clock()-start__);
		}
		case 1: {
			string first[]            = {"CIRCLE","GREEN","EMPTY","TWO"}
;
			string second[]           = {"DIAMOND","BLUE","STRIPED","ONE"}
;
			string expected__[]       = { "SQUIGGLE",  "RED",  "SOLID",  "THREE" };

			clock_t start__           = clock();
			vector <string> received__ = Matching().findMatch(vector <string>(first, first + (sizeof first / sizeof first[0])), vector <string>(second, second + (sizeof second / sizeof second[0])));
			return verify_case(casenum__, vector <string>(expected__, expected__ + (sizeof expected__ / sizeof expected__[0])), received__, clock()-start__);
		}
		case 2: {
			string first[]            = {"DIAMOND","RED","SOLID","ONE"}
;
			string second[]           = {"SQUIGGLE","BLUE","SOLID","TWO"}
;
			string expected__[]       = { "CIRCLE",  "GREEN",  "SOLID",  "THREE" };

			clock_t start__           = clock();
			vector <string> received__ = Matching().findMatch(vector <string>(first, first + (sizeof first / sizeof first[0])), vector <string>(second, second + (sizeof second / sizeof second[0])));
			return verify_case(casenum__, vector <string>(expected__, expected__ + (sizeof expected__ / sizeof expected__[0])), received__, clock()-start__);
		}
		case 3: {
			string first[]            = {"SQUIGGLE","RED","STRIPED","ONE"}
;
			string second[]           = {"SQUIGGLE","RED","STRIPED","ONE"}
;
			string expected__[]       = { "SQUIGGLE",  "RED",  "STRIPED",  "ONE" };

			clock_t start__           = clock();
			vector <string> received__ = Matching().findMatch(vector <string>(first, first + (sizeof first / sizeof first[0])), vector <string>(second, second + (sizeof second / sizeof second[0])));
			return verify_case(casenum__, vector <string>(expected__, expected__ + (sizeof expected__ / sizeof expected__[0])), received__, clock()-start__);
		}

		// custom cases

/*      case 4: {
			string first[]            = ;
			string second[]           = ;
			string expected__[]       = ;

			clock_t start__           = clock();
			vector <string> received__ = Matching().findMatch(vector <string>(first, first + (sizeof first / sizeof first[0])), vector <string>(second, second + (sizeof second / sizeof second[0])));
			return verify_case(casenum__, vector <string>(expected__, expected__ + (sizeof expected__ / sizeof expected__[0])), received__, clock()-start__);
		}*/
/*      case 5: {
			string first[]            = ;
			string second[]           = ;
			string expected__[]       = ;

			clock_t start__           = clock();
			vector <string> received__ = Matching().findMatch(vector <string>(first, first + (sizeof first / sizeof first[0])), vector <string>(second, second + (sizeof second / sizeof second[0])));
			return verify_case(casenum__, vector <string>(expected__, expected__ + (sizeof expected__ / sizeof expected__[0])), received__, clock()-start__);
		}*/
/*      case 6: {
			string first[]            = ;
			string second[]           = ;
			string expected__[]       = ;

			clock_t start__           = clock();
			vector <string> received__ = Matching().findMatch(vector <string>(first, first + (sizeof first / sizeof first[0])), vector <string>(second, second + (sizeof second / sizeof second[0])));
			return verify_case(casenum__, vector <string>(expected__, expected__ + (sizeof expected__ / sizeof expected__[0])), received__, clock()-start__);
		}*/
		default:
			return -1;
		}
	}
}
 

int main(int argc, char *argv[]) {
	if (argc == 1) {
		moj_harness::run_test();
	} else {
		for (int i=1; i<argc; ++i)
			moj_harness::run_test(atoi(argv[i]));
	}
}
// END CUT HERE
